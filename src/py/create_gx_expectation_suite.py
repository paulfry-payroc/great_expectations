import sys
import warnings
from datetime import datetime
from time import time

import common
import great_expectations as gx
from dotenv import load_dotenv


load_dotenv()  # Load environment variables from .env file

# Set up logging
logger = common.get_logger()

# Create a GX context
context = gx.get_context()

# Suppress DeprecationWarning for create_expectation_suite
warnings.filterwarnings("ignore", category=DeprecationWarning)


def seconds_to_human_readable(seconds):
    """Converts a duration in seconds to a human-readable format (hours and minutes)."""
    # Convert seconds to minutes and hours, and format the result as 'X hours and Y minutes'
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return f"{hours} hours and {minutes} minutes"


def log_expectation_suite_creation_times(table_times):
    """Logs the duration it took to build expectation suites for each table in a formatted report."""
    logger.info("\nTable Profiling Report: How Long it Took to Build the Expectation Suites\n")
    logger.info("| Table Name                     | Duration              | ")
    logger.info("| ------------------------------ | --------------------- | ")

    # Iterate through table_times and log table names and their corresponding durations
    for table_info in table_times:
        duration = seconds_to_human_readable(table_info["elapsed_time"])
        # Use string formatting to align columns properly
        logger.info(f"| {table_info['table']:30} | {duration:20} |")


def create_and_run_checkpoint(batch_request, expectation_suite_name):
    """Create a GX checkpoint and run GX test validations."""
    # Create a checkpoint with validations for the provided batch request and expectation suite
    checkpoint = context.add_or_update_checkpoint(
        name="my_checkpoint",
        validations=[
            {
                "batch_request": batch_request,
                "expectation_suite_name": expectation_suite_name,
            },
        ],
    )

    # Run validations for the checkpoint and build data documentation
    checkpoint_result = checkpoint.run()

    return checkpoint_result  # Return the result of the checkpoint run


def save_expectation_suite(data_assistant_result, expectation_suite_name):
    """Save the expectation suite generated by the data assistant."""
    try:
        expectation_suite = data_assistant_result.get_expectation_suite(expectation_suite_name=expectation_suite_name)
        context.add_or_update_expectation_suite(expectation_suite=expectation_suite)
        logger.info(f"\nExpectation suite '{expectation_suite_name}' saved successfully.\n")
    except Exception as e:
        logger.error(f"Error saving expectation suite: {e}")  # Log the error message if saving expectation suite fails
        raise  # Raise the exception if there is an error during the saving process


def run_data_assistant(batch_request, exclude_column_names=[]):
    """Run onboarding data assistant with the provided batch request."""
    try:
        START_TIME = time()
        data_assistant_result = context.assistants.onboarding.run(batch_request=batch_request)
        logger.debug("Data assistant run successful.")
        # Measure time taken by run_data_assistant
        ELAPSED_TIME = int(round(time() - START_TIME, 0))
        return data_assistant_result, ELAPSED_TIME  # Return the result of the data assistant run
    except Exception as e:
        logger.error(f"Error running data assistant: {e}")  # Log the error message if data assistant run fails
        raise RuntimeError(
            f"Error running data assistant: {e}"
        )  # Raise the exception if there is an error during the data assistant run


def prepare_expectation_suite(input_table):
    """Prepare and create a new expectation suite."""
    current_date_str = datetime.now().strftime("%Y%m%d")  # Get the current date in YYYYMMDD format
    expectation_suite_name = f"{current_date_str}_{input_table}"  # Create expectation suite name

    try:
        context.create_expectation_suite(expectation_suite_name, overwrite_existing=True)
        logger.debug(f"GX expectation suite '{expectation_suite_name}' created successfully.")
    except Exception as e:
        logger.error(f"Error creating expectation suite: {e}")
        raise  # Raise the exception if creating expectation suite fails

    return expectation_suite_name  # Return the name of the created expectation suite


def prepare_batch_request(input_table, gx_data_src_name):
    """Prepare a batch request for the given data asset name."""
    my_asset = context.get_datasource(gx_data_src_name).get_asset(input_table)  # Retrieve data asset
    batch_request = my_asset.build_batch_request()  # build batch request

    batches = my_asset.get_batch_list_from_batch_request(batch_request)  # Extract batches from batch request

    # Log batch specifications for debugging purposes
    [logger.debug(batch.batch_spec) for batch in batches]

    return batch_request  # Return the prepared batch request object


def main():
    """Main function to execute the script."""
    try:
        input_tables, other_params = common.load_config_from_yaml()  # fetch inputs from config.yaml
        logger.debug(f"input tables = {input_tables}\nother_params = {other_params}")  # log inputs for debugging

        table_times = []  # List to store elapsed time needed to profile each table

        for input_table in input_tables:
            logger.info(f"\nCreating (test) expectation suite for table: {input_table}")

            # Prepare a batch request for the given Snowflake table
            batch_request = prepare_batch_request(input_table, other_params["gx_data_src_name"])

            # Prepare and create a new expectation suite
            expectation_suite_name = prepare_expectation_suite(input_table)

            # Run onboarding data assistant with the provided batch request
            data_assistant_result, ELAPSED_TIME = run_data_assistant(batch_request)

            # Store elapsed time and input table information in the list
            table_times.append({"table": input_table, "elapsed_time": ELAPSED_TIME})

            # Save the expectation suite generated by the data assistant
            save_expectation_suite(data_assistant_result, expectation_suite_name)

            # Create a GX checkpoint and run GX test validations.
            create_and_run_checkpoint(batch_request, expectation_suite_name)

        # Generate GX 'data docs' - i.e., HTML pages to view the content
        context.build_data_docs()

        # Log the elapsed time for each table after the for loop
        log_expectation_suite_creation_times(table_times)

    except Exception as e:
        logger.error(f"\nAn error occurred: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
